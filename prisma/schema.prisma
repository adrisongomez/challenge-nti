// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String    @id @default(uuid()) @db.Uuid
    firstName String
    lastName  String
    email     String    @unique
    password  String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    createdBy String
    down      Boolean?
    downBy    String?
    downAt    DateTime?
}

model Customer {
    id          String    @id @default(uuid()) @db.Uuid
    firstName   String
    lastName    String
    address     String
    phoneNumber String
    personalId  String    @unique
    email       String    @unique
    gender      Gender    @default(OTHERS)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    createdBy   String
    down        Boolean?
    downBy      String?
    downAt      DateTime?
    invoices    Invoice[]
}

model Product {
    id           Int        @id @default(autoincrement())
    title        String
    description  String
    cost_price   String
    retail_price String
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    createdBy    String
    down         Boolean?
    downBy       String?
    downAt       DateTime?
    lineItems    LineItem[]
}

model LineItem {
    id             String    @id @default(uuid()) @db.Uuid
    productId      Int
    invoiceId      String    @db.Uuid
    invoice        Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade )
    product        Product   @relation(fields: [productId], references: [id], onDelete: NoAction )
    product_price  String
    sell_price     String
    discount_price String
    tax            String
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    createdBy      String
    down           Boolean?
    downBy         String?
    downAt         DateTime?
}

model Invoice {
    id         String         @id @default(uuid()) @db.Uuid
    customerId String         @db.Uuid
    notes      String?        @db.Text
    status     InvoiceStatus
    pay_type   InvoicePayType
    customer   Customer       @relation(fields: [customerId], references: [id])
    createdAt  DateTime       @default(now())
    updatedAt  DateTime       @updatedAt
    createdBy  String
    down       Boolean?
    downBy     String?
    downAt     DateTime?
    lineItems  LineItem[]
}

enum Gender {
    MALE
    FEMALE
    OTHERS
}

enum InvoicePayType {
    CASH
    CREDICT_CARD
    CHECK
    DEBT
}

enum InvoiceStatus {
    OPEN
    CLOSE
}
